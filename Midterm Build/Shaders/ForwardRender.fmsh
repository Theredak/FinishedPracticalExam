#version 420
#define MAX_LIGHTS_SIZE 50

//
const int DEFAULT=0;
const int POINT=1;
const int DIRECTIONAL=2;
const int SPOTLIGHT=3;


uniform vec4 LightPosition;

//color
uniform vec3 LightAmbient;
uniform vec3 LightDiffuse;
uniform vec3 LightSpecular;

//scalar
uniform float LightSpecularExponent;
uniform float Attenuation_Constant;
uniform float Attenuation_Linear;
uniform float Attenuation_Quadratic;

//amount of lights
uniform int LightAmount;

uniform bool LightEnable;
uniform int LightType;
uniform vec3 LightDirection ;
uniform float LightAngleConstraint;


uniform sampler2D uTex;
uniform vec3 uViewPos = vec3(0, 0, 0);
//uniform sampler2D uPos;
//uniform sampler2D uNorm;
//uniform sampler2D uScene;



uniform vec4 colourMod;
uniform bool textured;
uniform bool darken ;

in vec2 texcoord;
in vec4 norm;
in vec4 pos;

out vec4 outColor;

void pointLight();

void defaultLight()
{
    pointLight();
}

void spotLight()
{

}

void directionalLight()
{
    vec3 normal = normalize(norm).xyz;
    vec3 lightVec = LightPosition.xyz - (pos.xyz / pos.w);
    float dist = length(lightVec);
    float NdotL = max(dot(normal, LightDirection),0.0);

    //float angle = acos(dot(lightDir , LightDirection) / length(lightDir * LightDirection));
    if(NdotL > 0.0)
    {
        //The light contributes to this surface
        //Calculate attenuation (falloff)
        float attenuation = 1.0 / (Attenuation_Constant + (Attenuation_Linear * dist) + (Attenuation_Quadratic * dist * dist));
       
        //Calculate diffuse contribution
        outColor.rgb += LightDiffuse * NdotL * attenuation;
        
        //Blinn-Phong half vector
        float NdotHV =  max(dot(normal, normalize(LightDirection + lightVec)), 0.0); 
        
        //Calculate specular contribution
        outColor.rgb += LightSpecular * pow(NdotHV, LightSpecularExponent) * attenuation;
    }
}

void pointLight()
{
    vec3 normal = normalize(norm).xyz;
    vec3 lightVec = normalize(LightPosition.xyz - (pos.xyz / pos.w));
    float diff = max(dot(normal, lightVec), 0.0);
   // float dist = length(lightVec);
   
   
    //The light contributes to this surface
    //Calculate attenuation (falloff)
    float attenuation = 1.0 / (Attenuation_Constant + (Attenuation_Linear * diff) + (Attenuation_Quadratic * diff * diff));
      
    //Calculate diffuse contribution
    outColor.rgb += LightDiffuse * diff * attenuation ;
    
    //Blinn-Phong half vector
    float NdotHV =  max(dot(normal, normalize(lightVec + normalize(-pos.xyz))), 0.0); 
    
    //Calculate specular contribution
    outColor.rgb += LightSpecular * pow(NdotHV, LightSpecularExponent) * attenuation;
}

//void directionalLight()
//{
//    vec3 colour = texture(uTex, texcoord).rgb; 
//
//    vec3 normal = normalize(norm);
//    vec3 lightVec = LightPosition.xyz - pos;
//    float dist = length(lightVec);
//	vec3 direc = LightDirection;
//	vec3 reflection = reflect(-direc,normal);	
//	float viewToRe = max(dot(normalize(-pos),reflection),0.0);
//
//    float NdotL = max(dot(normal, lightVec),0.0);
//
//   
//    //The light contributes to this surface
//    //Calculate attenuation (falloff)
//    float attenuation = 1.0 / (Attenuation_Constant + (Attenuation_Linear * dist) + (Attenuation_Quadratic * dist * dist));
//      
//    //Calculate diffuse contribution
//	outColor.rgb +=  max(NdotL, 0.0) *  LightDiffuse * attenuation * colour;
//	//NdotL = NdotL * 0.5 + 0.5;
//    //outColor.rgb += LightDiffuse * attenuation * texture(uRamp, vec2(NdotL, 0.5)).rgb;
//    
//    //Blinn-Phong half vector
//    float NdotHV =  max(dot(normal, normalize(LightDirection + lightVec)), 0.0); 
//        
//    //Calculate specular contribution
//	float spec = pow(max(viewToRe, 0.0), 16);
//	outColor.rgb +=  LightSpecular * spec * attenuation * colour * LightSpecularExponent;
//    //outColor.rgb += LightSpecular * texture(uRamp, vec2(viewToRe, 0.5)).rgb * attenuation;
//}
//
//void pointLight()
//{
//	vec3 colour = texture(uTex, texcoord).rgb; 
//
//    vec3 normal = normalize(norm);
//    vec3 lightVec = LightPosition.xyz - pos;
//    float dist = length(lightVec);
//	vec3 direc = LightDirection;
//	vec3 reflection = reflect(-direc,normal);	
//	float viewToRe = max(dot(normalize(-pos),reflection),0.0);
//
//    float NdotL = max(dot(normal, lightVec),0.0);
//
//   
//    //The light contributes to this surface
//    //Calculate attenuation (falloff)
//    float attenuation = 1.0 / (Attenuation_Constant + (Attenuation_Linear * dist) + (Attenuation_Quadratic * dist * dist));
//      
//    //Calculate diffuse contribution
//	outColor.rgb +=  max(NdotL, 0.0) *  LightDiffuse * attenuation * colour;
//	//NdotL = NdotL * 0.5 + 0.5;
//    //outColor.rgb += LightDiffuse * attenuation * texture(uRamp, vec2(NdotL, 0.5)).rgb;
//    
//    //Blinn-Phong half vector
//    float NdotHV =  max(dot(normal, normalize(LightDirection + lightVec)), 0.0); 
//        
//    //Calculate specular contribution
//	float spec = pow(max(viewToRe, 0.0), 16);
//	
//	outColor.rgb += LightSpecular * spec * colour * attenuation ;
//}

void main()
{
    
     
    if(textured)
    {       
        vec4 textureColor = texture(uTex, texcoord);
        outColor = textureColor;
        outColor.rgb *= !darken ? textureColor.rgb * 1.2 : vec3(1);
        outColor *= colourMod;
    }
    else     
        outColor = colourMod; 
   
   outColor.rgb *= LightAmbient;
    
    
    //account for rasterizer interpolating
    vec3 normal = normalize(norm).xyz;
    
    if(LightEnable)
        switch(LightType)
        {        
        case POINT:
            pointLight();
            break;
        case DIRECTIONAL:
            directionalLight();
            break;
        case SPOTLIGHT:
            spotLight();
            break;
        default:
            defaultLight();
        }   

    //outColor.rgb = normal;    
}